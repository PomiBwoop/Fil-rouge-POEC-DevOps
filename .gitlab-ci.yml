#############################################################
###### VARIABLES & MISE EN OEUVRE DOCKER IN DOCKER ##########
#############################################################
default:
  tags:
    - ib-bdx
    - staging
    - docker

variables:
    REGISTRY: registry.gitlab.com/rmaziere
    IMAGE_NAME: webtweet
    CONTAINER_NAME: webtweet
    IMAGE_TAG: latest
    CONTAINER_IP: 172.17.0.3
    VM_PORT: 8080
    SNYK_TOKEN: "95633847-26f4-46d5-8be0-235d04d90fce"

image: docker:latest
services:
  - name: docker:dind
    alias: docker


#############################################################
######     DIFFERENTES ETAPES DE LA CI-CD   #################
#############################################################
stages:
  - Build
  - Test acceptance
  - Release image
  - Scan Securite
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy pre-prod
  - Test pre-prod
  - Deploy prod
  - Test prod


#############################################################
######       FONCTION TEST DE TEMPLATE    ###################
#############################################################
.test_template: &test
  image: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  only:
    - main
  script:
    - apk --no-cache add curl
    - curl "https://$DOMAIN" | grep "Linux Tweet App!"


#############################################################
######           PHASE DE BUILD         #####################
#############################################################
Phase Docker build:
  stage: Build
  script:
    - docker build -t webtweet:v1.0.0 -t webtweet:latest .
    - docker save webtweet:latest > webtweet_latest.tar
  artifacts:
    paths:
      - webtweet_latest.tar


#############################################################
######      PHASE DE TEST ET ACCEPTATION     ################
#############################################################
Phase Test acceptance:
  stage: Test acceptance
  script:
    - docker load < webtweet_latest.tar
    - docker run -d -p $VM_PORT:80 --name $CONTAINER_NAME $IMAGE_NAME:$IMAGE_TAG
    - sleep 5
    - apk --no-cache add curl
    - curl -o /dev/null --silent --head --write-out '%{http_code}\n' "http://$CONTAINER_IP:$VM_PORT" | grep "200" # Si code 200 => succès


#############################################################
###### PHASE DE RELEASE DE L'IMAGE GITLAB REGISTRY ##########
#############################################################
Phase Release image:
  stage: Release image
  script:
    - docker load < webtweet_latest.tar
    - docker tag webtweet:latest "$REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME"
#    - docker tag webtweet "$REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "$REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME"
#    - docker push "$REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"


#############################################################
######    PHASE DE SCAN DE SECURITE AVEC SNYK ###############
#############################################################
Phase Scan securite:
  stage: Scan Securite
  script:
    - docker run --rm -e SNYK_TOKEN=$SNYK_TOKEN
        -v /var/run/docker.sock:/var/run/docker.sock
        -v $(pwd):/app snyk/snyk:docker
        snyk test --docker $REGISTRY/$IMAGE_NAME:$IMAGE_TAG --json || true;


#############################################################
######   PHASE REVUE DEPLOIEMENT AVEC STOP REVIEW  ##########
#############################################################
Phase deploy review:
  stage: Deploy review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://ibdevops4amn-$CI_COMMIT_REF_NAME.herokuapp.com
    on_stop: Phase Stop review # see de label Phase Stop review BELOW
  only:
    - merge_requests
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-$CI_COMMIT_REF_NAME || echo "project already exist"
    - heroku container:push --app ibdevops4amn-$CI_COMMIT_REF_NAME web
    - heroku container:release --app ibdevops4amn-$CI_COMMIT_REF_NAME web


#############################################################
######  PHASE DE STOP DE REVUE AVANT CONTINUATION ###########
#############################################################
Phase Stop review:
  stage: Stop review
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests
  when: manual
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku apps:destroy --app ibdevops4amn-$CI_COMMIT_REF_NAME -c ibdevops4amn-$CI_COMMIT_REF_NAME


#############################################################
###### PHASE DEPLOIEMENT SUR ENVI DE STAGING  ###############
#############################################################
Phase Deploy staging:
  stage: Deploy staging
  tags:
    - ib-bdx
    - staging
    - shell
  script:
    - docker run -d -p $VM_PORT:80 --name $CONTAINER_NAME $REGISTRY/$IMAGE_NAME:$IMAGE_TAG

    - curl -o /dev/null --silent --head --write-out '%{http_code}\n' "http://172.0.0.1:$VM_PORT" | grep "200" # Si code 200 => succès


#############################################################
###### PHASE DEPLOIEMENT SUR ENVI DE PREPROD HEROKU #########
#############################################################
Phase Deploy pre-prod:
  stage: Deploy pre-prod
  environment:
    name: pre-prod
    url: https://ibdevops4amn-pre-prod.herokuapp.com
  only:
    - main
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-pre-prod || echo "project already exist"
    - heroku container:push --app ibdevops4amn-pre-prod web
    - heroku container:release --app ibdevops4amn-pre-prod web


#############################################################
###### PHASE DEPLOIEMENT SUR ENVI DE PROD HEROKU    #########
#############################################################
Phase Deploy prod:
  stage: Deploy prod
  environment:
    name: prod
    url: https://ibdevops4amn-prod.herokuapp.com
  only:
    - main
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-prod || echo "project already exist"
    - heroku container:push --app ibdevops4amn-prod web
    - heroku container:release --app ibdevops4amn-prod web


#############################################################
######  3 PHASES TESTS POUR STAING PREPROD ET PROD ##########
#############################################################

Phase de Test staging:
  <<: *test
  stage: Test staging
  variables:
    DOMAIN: ibdevops4amn-staging.herokuapp.com

Phase de Test pre-prod:
  <<: *test
  stage: Test pre-prod
  variables:
    DOMAIN: ibdevops4amn-pre-prod.herokuapp.com

Phase de Test prod:
  <<: *test
  stage: Test prod
  variables:
    DOMAIN: ibdevops4amn-prod.herokuapp.com

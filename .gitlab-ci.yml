#############################################################
###### VARIABLES & MISE EN OEUVRE DOCKER IN DOCKER ##########
#############################################################
default:
  tags:
    - ib-bdx
    - staging
    - docker

variables:
    REGISTRY: registry.gitlab.com/rmaziere
    REPOSITORY: fil-rouge-devops
    #IMAGE_NAME: webtweet
    CONTAINER_NAME: webtweet
    #IMAGE_TAG: latest
    CONTAINER_IP: 172.17.0.3
    EXTERN_PORT: 8080
    SNYK_TOKEN: "95633847-26f4-46d5-8be0-235d04d90fce"

    IMAGE_NAME: registry.gitlab.com/rmaziere/fil-rouge-devops
    IMAGE_TAG: main

image: docker:latest
services:
  - name: docker:dind
    alias: docker


#############################################################
######     DIFFERENTES ETAPES DE LA CI-CD   #################
#############################################################
stages:
  - Build
  - Test acceptance
  - Release image
  - Scan Securite
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy pre-prod
  - Test pre-prod
  - Deploy prod
  - Test prod


#############################################################
######       FONCTION TEST DE TEMPLATE    ###################
#############################################################
.test_template: &test
  image: ${IMAGE_NAME}:${IMAGE_TAG}
  only:
    - main
  script:
    - apk --no-cache add curl
    - curl "http://$DOMAIN" | grep "Linux Tweet App!"


#############################################################
######           BUILD         #####################
#############################################################
Phase Docker build:
  # Use the official docker image.
  stage: Build
  script:
    - docker build -t webtweet:v1.0.0 -t webtweet:latest .
    - docker save webtweet:latest > webtweet.tar
  artifacts:
    paths:
      - webtweet.tar


#############################################################
######      TEST ET ACCEPTATION     ################
#############################################################
Phase Test acceptance:
  # Official docker image.
  stage: Test acceptance
  script:
    - docker load < webtweet.tar
    #- docker stop webtweet
    #- docker rm webtweet
    - docker run --rm -d -p 80:80 -e PORT=80 --name webtweet webtweet:latest
    - sleep 5
    - apk --no-cache add curl
    #- curl "http://docker" | grep "Linux Tweet App!"
    - docker stop webtweet


#############################################################
######    RELEASE DE L'IMAGE SUR LE REGISTRY ##########
#############################################################
Phase Release image:
  stage: Release image
  script:
    - docker load < webtweet.tar
    - docker tag webtweet:latest "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
#    - docker tag webtweet "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
#    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"


#############################################################
######    SCAN DE SECURITE - SNYK ###############
#############################################################
Phase Scan securite:
  stage: Scan Securite
  script:
    - docker run --rm -e SNYK_TOKEN=$SNYK_TOKEN
        -v /var/run/docker.sock:/var/run/docker.sock
        -v $(pwd):/app snyk/snyk:docker
        snyk test --docker $REGISTRY/$REPOSITORY:$IMAGE_TAG --json || true;


#############################################################
######   REVUE DEPLOIEMENT AVEC STOP REVIEW  ##########
#############################################################
Phase deploy review:
  stage: Deploy review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://ibdevops4amn-$CI_COMMIT_REF_NAME.herokuapp.com
    on_stop: Phase Stop review # see de label Phase Stop review BELOW
  only:
    - merge_requests
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-$CI_COMMIT_REF_NAME || echo "project already exist"
    - heroku container:push --app ibdevops4amn-$CI_COMMIT_REF_NAME web
    - heroku container:release --app ibdevops4amn-$CI_COMMIT_REF_NAME web


#############################################################
######  STOP DE REVUE AVANT CONTINUATION ###########
#############################################################
Phase Stop review:
  stage: Stop review
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests
  when: manual
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku apps:destroy --app ibdevops4amn-$CI_COMMIT_REF_NAME -c ibdevops4amn-$CI_COMMIT_REF_NAME


#############################################################
######  DEPLOIEMENT SUR STAGING HEROKU #########
#############################################################
Phase Deploy staging:
  stage: Deploy staging
  environment:
    name: staging
    url: https://ibdevops4amn-staging.herokuapp.com
  only:
    - main
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-staging || echo "project already exist"
    - heroku container:push --app ibdevops4amn-staging web
    - heroku container:release --app ibdevops4amn-staging web


#############################################################
###### DEPLOIEMENT SUR PREPROD HEROKU #########
#############################################################
Phase Deploy pre-prod:
  stage: Deploy pre-prod
  environment:
    name: pre-prod
    url: https://ibdevops4amn-pre-prod.herokuapp.com
  only:
    - main
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-pre-prod || echo "project already exist"
    - heroku container:push --app ibdevops4amn-pre-prod web
    - heroku container:release --app ibdevops4amn-pre-prod web


#############################################################
###### DEPLOIEMENT SUR PROD HEROKU    #########
#############################################################
Phase Deploy prod:
  stage: Deploy prod
  environment:
    name: prod
    url: https://ibdevops4amn-prod.herokuapp.com
  only:
    - main
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create ibdevops4amn-prod || echo "project already exist"
    - heroku container:push --app ibdevops4amn-prod web
    - heroku container:release --app ibdevops4amn-prod web


#############################################################
######  3 PHASES TESTS POUR STAING PREPROD ET PROD ##########
#############################################################

Phase de Test staging:
  <<: *test
  stage: Test staging
  variables:
    DOMAIN: ibdevops4amn-staging.herokuapp.com

Phase de Test pre-prod:
  <<: *test
  stage: Test pre-prod
  variables:
    DOMAIN: ibdevops4amn-pre-prod.herokuapp.com

Phase de Test prod:
  <<: *test
  stage: Test prod
  variables:
    DOMAIN: ibdevops4amn-prod.herokuapp.com
